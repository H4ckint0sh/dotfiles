
 # introudce new language server
 # - set max completion results len to 20
 # - completions will return before snippets by default
 [language-server.scls]
 command = "simple-completion-language-server"

 [language-server.scls.config]
 max_completion_items = 20     # set max completion results len for each group: words, snippets, unicode-input
 snippets_first = true         # completions will return before snippets by default
 feature_words = true          # enable completion by word
 feature_snippets = true       # enable snippets
 feature_unicode_input = true  # enable "unicode input"
 feature_paths = true          # enable path completion

 [[sources]] # list of sources to load
 name = "friendly-snippets"  # optional name shown on snippet description
 git = "https://github.com/rafamadriz/friendly-snippets.git" # git repo with snippets collections

 [[language]]
 name = "rust"

 [language-server.gpt]
 command = "helix-gpt"
 environment = { HANDLER= "codeium"}

 [language-server.rust-analyzer.config]
 check = { command = "clippy", features = "all" }
 diagnostics = { experimental = { enable = true } }
 hover = { actions = { enable = true } }
 typing = { autoClosingAngleBrackets = { enable = true } }
 cargo = { allFeatures = true }
 procMacro = { enable = true }

 [[language]]
 name = "vue"
 scope = "source.vue"
 file-types = ["vue"]
 injection-regex = "vue"
 roots = ["package.json", "tailwind.config.js", "tailwind.config.cjs"]
 language-servers = ["volar", "tailwindcss-vue"]
 formatter = { command = "prettier", args = ["--parser", "vue"] }
 auto-format = true

 [[language]]
 name = "typescript"
 language-servers = [  "typescript-language-server", "tailwindcss-react", "eslint", "emmet-ls", "scls"]
 formatter = { command = 'npx', args = ["prettier", "--parser", "typescript"] }
 auto-format = true

 [[language]]
 name = "tsx"
 language-servers = [ "typescript-language-server", "tailwindcss-react", "eslint", "emmet-ls", "scls"]
 formatter = { command = 'npx', args = ["prettier", "--parser", "typescript"] }
 auto-format = true

 [[language]]
 name = "jsx"
 language-servers = [ "typescript-language-server", "tailwindcss-react", "eslint", "emmet-ls","scls"]
 grammar = "javascript"
 formatter = { command = 'npx', args = ["prettier", "--parser", "typescript"] }
 auto-format = true

 [[language]]
 name = "javascript"
 language-servers = [ "typescript-language-server", "tailwindcss-react", "eslint", "emmet-ls", "scls"]
 formatter = { command = 'npx', args = ["prettier", "--parser", "typescript"] }
 auto-format = true

 [[language]]
 name = "json"
 language-servers = [ "vscode-json-language-server" ]
 formatter = { command = 'npx', args = ["prettier", "--parser", "json"] }
 auto-format = true

 [[language]]
 name = "lua"
 auto-format = true

 [language-server.vscode-json-language-server.config]
 json = { validate = { enable = true }, format = { enable = true } }
 provideFormatter = true

 [language-server.vscode-css-language-server.config]
 css = { validate = { enable = true } }
 scss = { validate = { enable = true } }
 less = { validate = { enable = true } }
 provideFormatter = true

 [[language]]
 name = "html"
 formatter = { command = 'npx', args = ["prettier", "--parser", "html"] }
 language-servers = [ "vscode-html-language-server", "tailwindcss-react", "emmet-ls"]
 auto-format = true

 
 [[language]]
 name = "css"
 formatter = { command = 'npx', args = ["prettier", "--parser", "css"] }
 language-servers = [ "vscode-css-language-server", "tailwindcss-react", "emmet-ls"]
 auto-format = true

 [[language]]
 name = "scss"
 formatter = { command = "prettier", args = ["--stdin-filepath", "dummy.scss"] }
 language-servers = ["vscode-css-language-server"]
 auto-format = true


 [language-server.emmet-ls]
 args = ["--stdio"]
 command = "emmet-language-server"

 [language-server.eslint]
 args = ["--stdio"]
 command = "vscode-eslint-language-server"

 [language-server.eslint.config]
 format = { enable = true }
 nodePath = ""
 quiet = false
 rulesCustomizations = []
 run = "onType"
 validate = "on"
 codeAction = { disableRuleComment = { enable = true, location = "separateLine" }, showDocumentation = { enable = false } }
 codeActionsOnSave = { mode = "all", "source.fixAll.eslint" = true }
 experimental = { }
 problems = { shortenToSingleLine = false }

 [language-server.volar]
 command = "vue-language-server"
 args = ["--stdio"]

 [language-server.volar.config]
 typescript = { tsdk = "/Users/ali/.nvm/versions/node/v16.20.1/lib/node_modules/typescript/lib" }

 [language-server.tailwindcss-vue]
 command = "tailwindcss-language-server"
 args = ["--stdio"]
 config = {}

 [language-server.tailwindcss-react]
 language-id = "typescriptreact"
 command = "tailwindcss-language-server"
 args = ["--stdio"]
 config = {}

[language-server.astro-ls]
 command = "astro-ls"
 args = ["--stdio"]
 config = {typescript = {tsdk = "/Users/ali/Desktop/projects/taby-frontend-2023/node_modules/typescript/lib"}, environment = "node"}

[[language]]
 name = "astro"
 scope = "source.astro"
 injection-regex = "astro"
 file-types = ["astro"]
 language-servers = ["astro-ls"]
 formatter = { command = "prettier", args = ["--plugin", "prettier-plugin-astro", "--parser", "astro"] }
 auto-format = true
