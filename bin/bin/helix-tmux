#!/usr/bin/env bash
#
# Author: H4ckint0sh 
#
# Extensions used by Helix editor
#
# Depedencies:
# - `tmux`
# - `fzf` for the `search` subcommand
# - `bat` for the `search --buffer` option
# - `git` for the `git` subcommand
# - `gh` for the `git` subcommand `--browse` option

CANARY_FILE="/tmp/helix_tmux_canary"
DUMP_FILE="/tmp/helix_tmux_dump"

# Opens a list of files.
# Input files should be a space separated list of "<name>:<line>"
function open_files() {
    
    files=$1

    #Select the above pane
    tmux select-pane -U

    # Send ":" to start command input in Helix
    tmux send-keys ":"

    # Send the "open" command with file path(s) to the pane and simulate Enter
    tmux send-keys "open $files" C-m

}

function saturating_sub() {
    if (( $2 >= $1 )); then
        echo 1
    else
        echo $(( $1 - $2 ))
    fi
}

# Fetch file name and line number from the helix status bar.
function current_file_and_line() {

    # Get pane index of top pane
    top_pane_index=$(tmux display -p -t '{up-of}' '#{pane_index}')

    # Capture the content of the original pane
    top_pane_content=$(tmux capture-pane -p -t $top_pane_index)

    # Extract file name and line numbe 
    status_line=$(echo "$top_pane_content" | rg -e "(?:NOR|INS|SEL)\s+(\S*)\s[^│]* (\d+):*.*" -o --replace '$1 $2')
    file=$(echo $status_line| choose 0)
    line=$(echo $status_line| choose 1)


    echo "$file:$line"

}

# Search in current working directory
function search_cwd() {

    opts="x"$1

    file_paths=$(live-grep -$opts | tr '\n' ' ' | sed 's/ *$//')
    if [[ -n "$file_paths" ]]; then
        open_files "$file_paths"
    fi

}

# Search in git workspace
function search_ws() {
    wd=$(pwd)
    ws=$(git rev-parse --show-toplevel 2>/dev/null)
    if [ $? -ne 0 ]; then
        echo "Not in a git working directory"; sleep 2; return 1
    fi
    cd $ws
    search_cwd $1
    cd $wd
}

# Seach in current buffer
function search_buf() {
    fl=$(current_file_and_line)
    file=$(echo $fl | cut -d':' -f1)
    if [[ $file == "[scratch]" ]]; then
        echo "Can't search in scratch buffer"; sleep 2; return 1
    fi

    result=$(live-grep "$file")

    line=$(echo "$result" | cut -d " " -f 2)

    if [[ "$line" != "" ]]; then
        open_files "${file}:${line}"
    fi
}

function git_blame() {
    fl=$(current_file_and_line)
    file=$(echo $fl | cut -d':' -f1)
    line=$(echo $fl | cut -d':' -f2)
    git ls-files --error-unmatch "$file" 2> /dev/null
    if [ $? -ne 0 ]; then
        echo "Not in a git working directory"; sleep 3; return 1
    fi
    start=$(saturating_sub $line 10)

    # Run git blame and fzf commands
    git blame -L $line,+100 $file --color-by-age --color-lines | 
      fzf --ansi \
          --border none \
          --delimiter ':' \
          --height '100%' \
          --print-query --exit-0 \
          --scrollbar '▍'
}

function git_browse() {
    fl=$(current_file_and_line)
    file=$(echo $fl | cut -d':' -f1)

    git ls-files --error-unmatch "$file" 2> /dev/null
    if [ $? -ne 0 ]; then
        # Not in a git working directory. Open the repo root
        fl=""
    fi

    branch=$(git symbolic-ref --short HEAD)

    gh browse "$fl" -b "$branch"
    # Necessary sleep...
    sleep 1
}

function gitu_pane() {

    # Run gitu
    gitu

    # run reload on exit
    tmux set-hook pane-exited "run-shell '$HOME/bin/helix-reload.sh'"

}

function tree_pane() {
    nnn -c
}

# Print help and sleep $1 seconds
function help() {
    echo "Usage: helix-ext <command> [options]"
    echo ""
    echo "Commands:"
    echo "- 'search'"
    echo "   -b, --buffer: search in current buffer content"
    echo "   -c, --current: search in current working directory"
    echo "   -C, --current-inc-path: search in current working directory (include path)"
    echo "   -w, --workspace: search in git workspace (requires to be in a git repo)"
    echo "   -W, --workspace-inc-path: search in git workspace (include path)"
    echo "- 'git'"
    echo "   -u, --ui: lazygit"
    echo "- 'tree': open file tree (nnn)"
    echo "   -b, --blame: print blame info for current file"
    echo "   -B, --browse: browse remote repo at current file and line"
    exit 1
}

if [ ! -e "$CANARY_FILE" ]; then

    touch "$CANARY_FILE"

    if [[ "$@" =~ "tree" ]]; then
        # Re-execute in a left vertical pane for nnn
        exec tmux split-window -b -h -l 20% helix-tmux "$@"
    elif [[ "$@" =~ "git" ]]; then
        # Re-execute in a left vertical pane for nnn
        exec tmux split-window -h -l 50% helix-tmux "$@"
    else
        # Re-execute the script in a horizontal pane for everything else
        exec tmux split-window -v -l 70% helix-tmux "$@"
    fi
    
fi

# Remove the canary file
rm "$CANARY_FILE"

case "$1" in
    "search") 
        case $2 in
            "-b"|"--buffer")
                search_buf
                ;;
            "-c"|"--current")
                search_cwd
                ;;
             "-C"|"--current-inc-path")
                search_cwd "f"
                ;;
            "-w"|"--workspace")
                search_ws
                ;;
            "-W"|"--workspace-inc-path")
                search_ws "f"
                ;;
            "*")
                help 3
        esac
        ;;
    "git")
        case $2 in
            "-u"|"--gitu")
                gitu_pane
                ;;
            "-b"|"--blame")
                git_blame
                ;;
            "-B"|"--browse")
                git_browse
                ;;
            "*")
                help 3
        esac
        ;;
    "tree")
        tree_pane
        ;;
    *)
        help 3
        ;;
esac

# Optionally remove temporary file
rm -f $DUMP_FILE
