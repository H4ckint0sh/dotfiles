#!/usr/bin/env bun
// @bun
var F0=Object.defineProperty;var Y0=(P,_)=>{for(var N in _)F0(P,N,{get:_[N],enumerable:!0,configurable:!0,set:(R)=>_[N]=()=>R})};import W0 from"events";import{parseArgs as G0} from"util";var C={openai:"Continue the input code from the language <languageId>. Only respond with code.",copilot:"<languageId> completions. Only respond with code.",ollama:"Continue the input code from the language <languageId>. Only respond with code."};var k=[{key:"resolveDiagnostics",label:"Resolve diagnostics",query:"Resolve the diagnostics for this code."},{key:"generateDocs",label:"Generate documentation",query:"Add documentation to this code."},{key:"improveCode",label:"Improve code",query:"Improve this code."},{key:"refactorFromComment",label:"Refactor code from a comment",query:"Refactor this code based on the comment."},{key:"writeTest",label:"Write a unit test",query:"Write a unit test for this code. Do not include any imports."}];var{values:M}=G0({args:Bun.argv,options:{logFile:{type:"string",default:Bun.env.LOG_FILE??""},handler:{type:"string",default:Bun.env.HANDLER??"openai"},debounce:{type:"string",default:Bun.env.DEBOUNCE??"400"},triggerCharacters:{type:"string",default:Bun.env.TRIGGER_CHARACTERS??"{||(|| "},openaiKey:{type:"string",default:Bun.env.OPENAI_API_KEY},openaiContext:{type:"string",default:Bun.env.OPENAI_CONTEXT?.length?Bun.env.OPENAI_CONTEXT:C.openai},openaiModel:{type:"string",default:Bun.env.OPENAI_MODEL??"gpt-3.5-turbo-16k"},openaiMaxTokens:{type:"string",default:Bun.env.OPENAI_MAX_TOKENS??"7000"},openaiEndpoint:{type:"string",default:Bun.env.OPENAI_ENDPOINT??"https://api.openai.com/v1"},copilotEndpoint:{type:"string",default:Bun.env.GITHUB_ENDPOINT??"https://api.githubcopilot.com"},copilotContext:{type:"string",default:Bun.env.COPILOT_CONTEXT?.length?Bun.env.COPILOT_CONTEXT:C.copilot},copilotModel:{type:"string",default:Bun.env.COPILOT_MODEL??"gpt-3.5-turbo"},copilotApiKey:{type:"string",default:Bun.env.COPILOT_API_KEY},authCopilot:{type:"boolean",default:!1},authCodeium:{type:"boolean",default:!1},codeiumApiKey:{type:"string",default:Bun.env.CODEIUM_API_KEY??"d49954eb-cfba-4992-980f-d8fb37f0e942"},fetchTimeout:{type:"string",default:Bun.env.FETCH_TIMEOUT??"10000"},actionTimeout:{type:"string",default:Bun.env.ACTION_TIMEOUT??"10000"},completionTimeout:{type:"string",default:Bun.env.COMPLETION_TIMEOUT??"10000"},ollamaEndpoint:{type:"string",default:Bun.env.OLLAMA_ENDPOINT??"http://127.0.0.1:11434"},ollamaModel:{type:"string",default:Bun.env.OLLAMA_MODEL??"codellama"},ollamaContext:{type:"string",default:Bun.env.OLLAMA_CONTEXT?.length?Bun.env.OLLAMA_CONTEXT:C.ollama},ollamaTimeout:{type:"string",default:Bun.env.OLLAMA_TIMEOUT??"60000"}},strict:!0,allowPositionals:!0});if(!Bun.env.TEST_RUNNER?.length&&!M.openaiKey?.length&&!M.copilotApiKey?.length&&!M.authCopilot&&!M.authCodeium&&M.handler!=="codeium"&&M.handler!=="ollama")throw new Error("no handler key provided");var F={...M,triggerCharacters:M.triggerCharacters.split("||"),debounce:parseInt(M.debounce),fetchTimeout:parseInt(M.fetchTimeout),actionTimeout:parseInt(M.actionTimeout),completionTimeout:parseInt(M.completionTimeout)};import J0 from"crypto";import O0 from"fs";var c={},s=(P,_,N)=>{if(c[P])clearTimeout(c[P]);c[P]=setTimeout(_,N)},u=(P)=>{const _=new URLSearchParams(P);return Object.fromEntries(_.entries())},O=(P)=>{return J0.randomBytes(P/2).toString("hex")},n=()=>{return O(8)+"-"+O(4)+"-"+O(4)+"-"+O(4)+"-"+O(12)},g=async(P,_,N)=>{const R=P?.split("\n").slice(0,_+1);R[R.length-1]=R[R.length-1].split("").slice(0,N).join("");const $=R[R.length-1],z=R.join("\n"),G=P?.split("\n").slice(_+1).join("\n"),W=z.slice(-1),K=P?.split("\n")[_].slice(N);return{contentBefore:z,contentAfter:G,lastCharacter:W,lastLine:$,contentImmediatelyAfter:K}},l,Y=(...P)=>{if(!F.logFile)return;if(Bun.env.TEST_RUNNER)console.log(a(...P));else if(F.logFile?.length){if(!l)l=O0.createWriteStream(F.logFile);try{l.write(a(...P)+"\n\n")}catch(_){}}},a=(...P)=>{let _=[];return P.forEach((N)=>{_.push(N),_.push("|")}),_=_.slice(0,_.length-1),["APP",(new Date()).toISOString(),"-->",..._].join(" ")},U=(P)=>{return Array.from(new Set(P))},t=(P)=>{if(!P?.length)return{};const _={},N=P.split(";");for(let R of N){const[$,z]=R.split("=");_[$]=z}return _},e=()=>{return Math.floor(Date.now()/1000)},D=(P,_,N)=>{const R=new RegExp(`\`\`\`${N}([\\s\\S]*?)\`\`\``,"g");let $;const z=[];while(($=R.exec(_))!==null)z.push($[0]);const G=z[0];if(!G?.length)return;const W=G?.replace(`// FILEPATH: ${P.replace("file://","")}\n`,"")?.split("\n");return W?.slice(1,W.length-1)?.join("\n")+"\n"};var X;(function(J){J["DidOpen"]="textDocument/didOpen";J["DidChange"]="textDocument/didChange";J["Completion"]="textDocument/completion";J["CodeAction"]="textDocument/codeAction";J["ApplyEdit"]="workspace/applyEdit";J["ExecuteCommand"]="workspace/executeCommand";J["Initialize"]="initialize";J["Shutdown"]="shutdown";J["Exit"]="exit";J["PublishDiagnostics"]="textDocument/publishDiagnostics"})(X||(X={}));var T;(function($){$[$["Error"]=1]="Error";$[$["Warning"]=2]="Warning";$[$["Information"]=3]="Information";$[$["Hint"]=4]="Hint"})(T||(T={}));class P0{emitter;capabilities;currentUri;buffers;constructor({capabilities:P}){this.emitter=new W0({captureRejections:!0}),this.capabilities=P,this.buffers={},Y("triggerCharacters:",JSON.stringify(P?.completionProvider?.triggerCharacters)),this.registerDefault()}registerDefault(){this.emitter.on("error",(P)=>{Y("lsp-event-emitter error",P.message)}),this.on(X.Initialize,async({ctx:P})=>{P.send({method:X.Initialize,id:0,result:{capabilities:this.capabilities}})}),this.on(X.DidOpen,({ctx:P,request:_})=>{const{uri:N,text:R,languageId:$}=_.params.textDocument;this.buffers[N]={uri:N,text:R,languageId:$,version:0},this.currentUri=N,Y("received didOpen",`language: ${$}`)}),this.on(X.Shutdown,()=>{Y("received shutdown request"),process.exit(0)}),this.on(X.DidChange,async({ctx:P,request:_})=>{const{uri:N,version:R}=_.params.textDocument;this.buffers[N]={...this.buffers[N],version:R,text:_.params.contentChanges[0].text},this.currentUri=N,Y("received didChange",`language: ${this.buffers[N].languageId}`,`contentVersion: ${R}`,`uri: ${N}`)})}getContentPadding(P){return P.split("\n").reduce((R,$)=>{if($.trim().length===0)return R;const G=$.match(/^\s+/)?.[0].length||0;return Math.min(G,R)},99999)}padContent(P,_){return P.split("\n").map((N)=>{if(N.trim().length===0)return N;return" ".repeat(_)+N}).join("\n")}registerEventHandlers(P){Object.values(P).forEach((_)=>{_(this)})}getContentFromRange(P){Y("getting content from range",JSON.stringify(P),`uri: ${this.currentUri}`,`current buffers: ${JSON.stringify(Object.keys(this.buffers))}`);const{start:_,end:N}=P;return this.buffers[this.currentUri]?.text?.split("\n")?.slice(_.line,N.line).join("\n")}positionalUpdate(P,_,N){const $=this.buffers[P]?.text?.split("\n"),z=N.start.line,G=N.end.line,W=$[z],K=$[G],w=W?.substring(0,N.start.character),J=K?.substring(N.end.character),Z=[w+_+J],p=$.reduce((j,L,B)=>{if(B<z||B>G)j.push(L);else if(B===z)j.push(Z[0]);return j},[]);this.buffers[P].text=p.join("\n")}on(P,_){this.emitter.on(P,async(N)=>{try{await _({ctx:this,request:N})}catch(R){Y("error in event",JSON.stringify(N),R.message)}})}send({method:P,id:_,result:N,params:R}){const $=JSON.stringify({jsonrpc:"2.0",method:P,id:_,result:N,params:R});console.log(`Content-Length: ${$.length}\r\n\r\n${$}`),Y("sent request",$)}sendDiagnostics(P,_=0){Y("sending diagnostics",JSON.stringify(P));const N={uri:this.currentUri,diagnostics:P.map((R)=>{return R.source="helix-gpt",R})};if(this.send({method:X.PublishDiagnostics,params:N}),_>0)setTimeout(()=>{this.send({method:X.PublishDiagnostics,params:{uri:this.currentUri,diagnostics:[]}})},_)}resetDiagnostics(){this.send({method:X.PublishDiagnostics,params:{uri:this.currentUri,diagnostics:[]}})}parseLine(P){const _=P.split("\r\n");for(let N of _)try{return JSON.parse(N)}catch(R){}throw new Error("failed to parse")}async receiveLine(P){try{const _=this.parseLine(P);if(![X.DidChange,X.DidOpen].includes(_.method))Y("received request:",JSON.stringify(_));this.emitter.emit(_.method,_)}catch(_){Y("failed to parse line:",_.message,P)}}async start(){for await(let P of Bun.stdin.stream()){const _=Buffer.from(P).toString();this.receiveLine(_)}}}var _0={Service:P0,Event:X,DiagnosticSeverity:T};var r={};Y0(r,{completions:()=>{{return M0}},actions:()=>{{return K0}}});var o={},X0=(P,_)=>{o[P]=_},N0=(P)=>{if(!o[F.handler]){const _=`no provider: ${F.handler}`;throw Y(_),new Error(_)}return o[F.handler]},Z0=async(...P)=>{Y(F.handler,"chat request",JSON.stringify(P));const _=N0(F.handler);if(!_.chat){const N=`No chat provider for: ${F.handler}`;throw Y(N),new Error(N)}return _.chat(...P)},j0=async(...P)=>{Y(F.handler,"completion request");const _=N0(F.handler);if(!_.completion){const N=`No completion provider for: ${F.handler}`;throw Y(N),new Error(N)}return _.completion(...P)},V={chat:Z0,completion:j0,registerProvider:X0};var K0=(P)=>{P.on(X.ExecuteCommand,async({ctx:_,request:N})=>{const{command:R}=N.params,{diagnostics:$,range:z}=N.params.arguments[0];let{query:G}=N.params.arguments[0];_.sendDiagnostics([{message:`Executing ${R}...`,range:z,severity:T.Information}],F.actionTimeout);const W=_.getContentFromRange(z),K=_.getContentPadding(W),w=_.buffers[_.currentUri];if(Y("chat request content:",W),$?.length)G+="\n\nDiagnostics: "+$.join("\n- ");try{var{result:J}=await V.chat(G,W,_.currentUri,w?.languageId);if(!J?.length)throw new Error("No completion found")}catch(Z){return Y("chat failed",Z.message),_.sendDiagnostics([{message:Z.message,severity:T.Error,range:z}],F.actionTimeout)}J=_.padContent(J.trim(),K)+"\n",Y("received chat result:",J),_.send({method:X.ApplyEdit,id:N.id,params:{label:R,edit:{changes:{[_.currentUri]:[{range:z,newText:J}]}}}}),_.resetDiagnostics()}),P.on(X.CodeAction,({ctx:_,request:N})=>{_.currentUri=N.params.textDocument.uri,_.send({id:N.id,result:k.map((R)=>({title:R.label,kind:"quickfix",diagnostics:[],command:{title:R.label,command:R.key,arguments:[{range:N.params.range,query:R.query,diagnostics:N.params.context?.diagnostics?.map(($)=>$.message)}]}}))})})};var M0=(P)=>{P.on(X.Completion,async({ctx:N,request:R})=>{const $=N.buffers[R.params.textDocument.uri],z=$.version,{lastCharacter:G}=await g($.text,R.params.position.line,R.params.position.character);if(G==".")return N.send({id:R.id,result:{isIncomplete:!1,items:[]}});s("completion",async()=>{try{await _({ctx:N,request:R,lastContentVersion:z})}catch(W){Y("error in completion event",W.message),N.sendDiagnostics([{message:W.message,severity:T.Error,range:{start:{line:R.params.position.line,character:0},end:{line:R.params.position.line+1,character:0}}}],F.completionTimeout)}},F.debounce)});const _=async({ctx:N,request:R,lastContentVersion:$})=>{const z=()=>{N.resetDiagnostics(),N.send({id:R.id,result:{isIncomplete:!1,items:[]}})},G=N.buffers[R.params.textDocument.uri];if(Y("running completion on buffer",JSON.stringify(G)),G.version>$)return Y("skipping because content is stale"),z();const{lastLine:W,contentBefore:K,contentAfter:w,contentImmediatelyAfter:J}=await g(G.text,R.params.position.line,R.params.position.character);Y("calling completion event"),N.sendDiagnostics([{message:"Fetching completion...",severity:T.Information,range:{start:{line:R.params.position.line,character:0},end:{line:R.params.position.line+1,character:0}}}],F.completionTimeout);try{var Z=await V.completion({contentBefore:K,contentAfter:w},N.currentUri,G?.languageId)}catch(j){return N.sendDiagnostics([{message:j.message,severity:T.Error,range:{start:{line:R.params.position.line,character:0},end:{line:R.params.position.line+1,character:0}}}],F.completionTimeout)}Y("completion hints:",Z);const p=Z?.map((j)=>{if(j=j.trim(),j.startsWith(W.trim()))j=j.slice(W.trim().length).trim();const L=j.split("\n"),B=R.params.position.line+L.length-1;let d=L.slice(-1)[0].length;if(B==R.params.position.line)d+=R.params.position.character;return{label:L[0].length>20?L[0]:j.slice(0,20).trim(),kind:1,preselect:!0,detail:j,insertText:j,insertTextFormat:1,additionalTextEdits:[{newText:"",range:{start:{line:B,character:d},end:{line:B,character:d+J?.length}}}]}});N.send({id:R.id,result:{isIncomplete:!1,items:p}}),N.resetDiagnostics()}};class Q{url;headers;params;constructor({url:P,headers:_,params:N}){this.url=P,this.headers=_||{},this.params=N||{}}async fetch(P,_,N=F.fetchTimeout){return new Promise(async(R,$)=>{setTimeout(()=>$(new Error("timeout")),N);try{const z=await fetch(P,_);R(z)}catch(z){$(z)}})}async request(P){const{endpoint:_,method:N,body:R,headers:$,params:z,url:G,timeout:W}=P;let K=new URL(_,G||this.url);if(Y("fetch",_),z)Object.keys(z).forEach((Z)=>K.searchParams.append(Z,z[Z]));Object.keys(this.params).forEach((Z)=>{K.searchParams.append(Z,this.params[Z])});let w={headers:{...this.headers,...$},method:N,body:null};if(R)w.body=JSON.stringify(R);const J=await this.fetch(K.toString(),w,W);if(!J.ok){let Z=await J.text();throw new Error(`Fetch failed with status ${J.status} body ${Z} url: ${P.endpoint}`)}if(Y("response",K,J.status),P.text)return await J.text();return await J.json()}}class I{deviceCode;userCode;verificationUri;expiresIn;interval;message;constructor(P){this.deviceCode=P.device_code,this.userCode=P.user_code,this.verificationUri=P.verification_uri,this.expiresIn=P.expires_in,this.interval=P.interval,this.message=P.message}static fromResponse(P){const _=u(P);return new I(_)}}class E{accessToken;tokenType;scope;constructor(P){this.accessToken=P.access_token,this.tokenType=P.token_type,this.scope=P.scope}static fromResponse(P){const _=u(P);return new E(_)}}class b{exp;raw;constructor(P){this.exp=P.exp,this.raw=P.raw}static fromResponse(P){const _=t(P?.token);return new b({exp:parseInt(_.exp),raw:P?.token})}}class S extends Array{constructor(...P){super();this.push(...U(P))}static fromResponse(P){const _=P.split("\n").map((R)=>R.slice(5)).map((R)=>{try{return JSON.parse(R).choices[0]}catch($){return null}}).filter((R)=>R).reduce(function(R,$){return R[$.index]=R[$.index]||[],R[$.index].push($),R},Object.create(null)),N=Object.values(_).map((R)=>R.map(($)=>$.text).join(""));return new S(...N)}}class h{result;constructor(P){this.result=P}static fromResponse(P,_,N){const R=P?.choices?.map((z)=>z.message?.content),$=D(_,R[0],N);return new h($)}}class A extends Q{copilotSession;constructor(){super({url:"https://github.com",headers:{"Content-Type":"application/json"}})}async deviceCode(){const P=await this.request({method:"POST",endpoint:"/login/device/code",text:!0,params:{scope:"read:user",client_id:"Iv1.b507a08c87ecfe98"}});return I.fromResponse(P)}async accessToken(P){const _=await this.request({method:"POST",endpoint:"/login/oauth/access_token",text:!0,params:{client_id:"Iv1.b507a08c87ecfe98",device_code:P,grant_type:"urn:ietf:params:oauth:grant-type:device_code"}});return E.fromResponse(_)}async refreshCopilotSession(){if(this.copilotSession?.exp&&this.copilotSession?.exp>=e())return;const P=await this.request({method:"GET",url:"https://api.github.com",endpoint:"/copilot_internal/v2/token",headers:{Authorization:`Bearer ${F.copilotApiKey}`}});this.copilotSession=b.fromResponse(P)}async chat(P,_,N,R){await this.refreshCopilotSession();const z={intent:!0,max_tokens:7909,model:"gpt-4",n:1,stream:!1,temperature:0.1,top_p:1,messages:[{content:`You are an AI programming assistant.\nWhen asked for your name, you must respond with \"GitHub Copilot\".\nFollow the user's requirements carefully & to the letter.\n- Each code block starts with \`\`\` and // FILEPATH.\n- You always answer with ${R} code.\n- When the user asks you to document something, you must answer in the form of a ${R} code block.\nYour expertise is strictly limited to software development topics.\nFor questions not related to software development, simply give a reminder that you are an AI programming assistant.\nKeep your answers short and impersonal.`,role:"system"},{content:`I have the following code in the selection:\n\`\`\`${R}\n// FILEPATH: ${N.replace("file://","")}\n${_}`,role:"user"},{content:P,role:"user"}]},G={"Content-Type":"application/json; charset=utf-8","User-Agent":"GitHubCopilotChat/0.8.0",Authorization:`Bearer ${this.copilotSession?.raw}`,"Editor-Plugin-Version":"copilot-chat/0.8.0","Editor-Version":"vscode/1.83.1","Openai-Intent":"conversation-panel","Openai-Organization":"github-copilot","VScode-MachineId":O(64),"VScode-SessionId":O(8)+"-"+O(4)+"-"+O(4)+"-"+O(4)+"-"+O(25),"X-Request-Id":O(8)+"-"+O(4)+"-"+O(4)+"-"+O(4)+"-"+O(12),"Accept-Encoding":"gzip,deflate,br",Accept:"*/*",Connection:"close"},W=await this.request({method:"POST",body:z,headers:G,url:"https://api.githubcopilot.com",endpoint:"/chat/completions"});return h.fromResponse(W,N,R)}async completion(P,_,N,R=3){await this.refreshCopilotSession();const $={"Content-Type":"application/json; charset=utf-8","User-Agent":"GithubCopilot/1.155.0",Authorization:`Bearer ${this.copilotSession?.raw}`,"Editor-Plugin-Version":"copilot/1.155.0","Editor-Version":"vscode/1.85.1","Openai-Intent":"copilot-ghost","Openai-Organization":"github-copilot","VScode-MachineId":O(64),"VScode-SessionId":O(8)+"-"+O(4)+"-"+O(4)+"-"+O(4)+"-"+O(25),"X-Request-Id":O(8)+"-"+O(4)+"-"+O(4)+"-"+O(4)+"-"+O(12),"Accept-Encoding":"gzip,deflate,br",Accept:"*/*"},z={extra:{language:N,next_indent:0,prompt_tokens:500,suffix_tokens:400,trim_by_indentation:!0},max_tokens:500,n:R,nwo:"app",prompt:`// Path: ${_.replace("file://","")}\n${P.contentBefore}`,stop:["\n\n"],stream:!0,suffix:P.contentAfter,temperature:R>1?0.4:0,top_p:1},G=await this.request({method:"POST",body:z,headers:$,text:!0,url:"https://copilot-proxy.githubusercontent.com",endpoint:"/v1/engines/copilot-codex/completions"});return S.fromResponse(G)}}var R0=async()=>{const P=new A,_=await P.deviceCode();console.log(`Visit: ${_.verificationUri} in your browser and enter: ${_.userCode}`);while(!0){await new Promise((R)=>setTimeout(R,5000));const N=await P.accessToken(_.deviceCode);if(N?.accessToken?.length){console.log("\n\nGot token:",N.accessToken,"\n\n","Store this in the COPILOT_API_KEY environment variable");break}console.log("Waiting for user authorization...")}};class i extends Array{constructor(...P){super();this.push(...U(P))}static fromResponse(P){return P.completionItems?.map((_)=>_.completion.text)}}var V0={unspecified:0,c:1,clojure:2,coffeescript:3,cpp:4,csharp:5,css:6,cudacpp:7,dockerfile:8,go:9,groovy:10,handlebars:11,haskell:12,hcl:13,html:14,ini:15,java:16,javascript:17,json:18,julia:19,kotlin:20,latex:21,less:22,lua:23,makefile:24,markdown:25,objectivec:26,objectivecpp:27,perl:28,php:29,plaintext:30,protobuf:31,pbtxt:32,python:33,r:34,ruby:35,rust:36,sass:37,scala:38,scss:39,shell:40,sql:41,starlark:42,swift:43,tsx:44,typescript:45,visualbasic:46,vue:47,xml:48,xsl:49,yaml:50,svelte:51,toml:52,dart:53,rst:54,ocaml:55,cmake:56,pascal:57,elixir:58,fsharp:59,lisp:60,matlab:61,powershell:62,solidity:63,ada:64,ocaml_interface:65};class H extends Q{sessionId;apiKey;constructor(P=F.codeiumApiKey){super({url:"https://web-backend.codeium.com",headers:{"Content-Type":"application/json"}});this.sessionId=n(),this.apiKey=P}authUrl(){return`https://codeium.com/profile?response_type=token&redirect_uri=vim-show-auth-token&state=${this.sessionId}&scope=openid%20profile%20email&redirect_parameters_type=query`}async register(P){const _={"Content-Type":"application/json"},N={firebase_id_token:P};return(await this.request({method:"POST",headers:_,url:"https://api.codeium.com",endpoint:"/register_user/",body:N}))?.api_key}async completion(P,_,N,R=3){const $={"Content-Type":"application/json",Authorization:`Basic ${this.apiKey}-${this.sessionId}`};_=_.replace("file://","");const z={metadata:{ideName:"web",ideVersion:"unknown",extensionVersion:"1.6.13",extensionName:"helix-gpt",apiKey:this.apiKey,sessionId:this.sessionId},document:{editor_language:N,language:V0[N],cursor_offset:P.contentBefore.length,line_ending:"\n",absolute_path:_,relative_path:_,text:P.contentBefore+"\n"+ +P.contentAfter},editor_options:{tab_size:2,insert_spaces:!0},other_documents:[]},G=await this.request({method:"POST",body:z,headers:$,endpoint:"/exa.language_server_pb.LanguageServerService/GetCompletions"});return i.fromResponse(G).slice(0,R)}}var $0=async()=>{const P=new H,_=P.authUrl();console.log(`Visit the following URL and enter the token below: ${_}`);const N=prompt("Token: "),R=await P.register(N?.trim());console.log(`\nCodeium API key: ${R}`)};class m extends Array{constructor(...P){super();this.push(...U(P))}static fromResponse(P){const _=P?.choices?.map((N)=>N.message.content);return new m(..._)}}class f{result;constructor(P){this.result=P}static fromResponse(P,_,N){const R=P?.choices?.map((z)=>z.message?.content),$=D(_,R[0],N);return new f($)}}class y extends Q{constructor(){super({url:F.openaiEndpoint,headers:{"Content-Type":"application/json",Authorization:`Bearer ${F.openaiKey}`}})}async chat(P,_,N,R){const z={max_tokens:7909,model:"gpt-4",n:1,stream:!1,temperature:0.1,top_p:1,messages:[{content:`You are an AI programming assistant.\nWhen asked for your name, you must respond with \"GitHub Copilot\".\nFollow the user's requirements carefully & to the letter.\n- Each code block starts with \`\`\` and // FILEPATH.\n- You always answer with ${R} code.\n- When the user asks you to document something, you must answer in the form of a ${R} code block.\nYour expertise is strictly limited to software development topics.\nFor questions not related to software development, simply give a reminder that you are an AI programming assistant.\nKeep your answers short and impersonal.`,role:"system"},{content:`I have the following code in the selection:\n\`\`\`${R}\n// FILEPATH: ${N.replace("file://","")}\n${_}`,role:"user"},{content:P,role:"user"}]},G=await this.request({method:"POST",body:z,endpoint:"/v1/chat/completions",timeout:1e4});return f.fromResponse(G,N,R)}async completion(P,_,N,R=3){const $=[{role:"system",content:F.openaiContext?.replace("<languageId>",N)+"\n\n"+`End of file context:\n\n${P.contentAfter}`},{role:"user",content:`Start of file context:\n\n${P.contentBefore}`}],z={model:F.openaiModel,max_tokens:parseInt(F.openaiMaxTokens),n:R,temperature:R>1?0.4:0,top_p:1,frequency_penalty:1,presence_penalty:2,messages:$},G=await this.request({method:"POST",body:z,endpoint:"/v1/chat/completions"});return m.fromResponse(G)}}class v extends Array{constructor(...P){super();this.push(...U(P))}static fromResponse(P){return new v(P.message.content)}}class x{result;constructor(P){this.result=P}static fromResponse(P,_,N){const R=P.message.content,$=D(_,R,N);return new x($)}}class q extends Q{timeout;model;constructor(){super({url:F.ollamaEndpoint,headers:{"Content-Type":"application/json"}});this.timeout=parseInt(F.ollamaTimeout,10),this.model=F.ollamaModel}async chat(P,_,N,R){const $=[{content:`You are an AI programming assistant.\nWhen asked for your name, you must respond with \"GitHub Copilot\".\nFollow the user's requirements carefully & to the letter.\n- Each code block starts with \`\`\` and // FILEPATH.\n- You always answer with ${R} code.\n- When the user asks you to document something, you must answer in the form of a ${R} code block.\nYour expertise is strictly limited to software development topics.\nFor questions not related to software development, simply give a reminder that you are an AI programming assistant.\nKeep your answers short and impersonal.`,role:"system"},{content:`I have the following code in the selection:\n\`\`\`${R}\n// FILEPATH: ${N.replace("file://","")}\n${_}`,role:"user"},{content:P,role:"user"}];Y("prompt",$.map((W)=>`role: ${W.role}\n${W.content}`).join("\n"));const z={model:this.model,stream:!1,messages:$},G=await this.request({method:"POST",body:z,endpoint:"/api/chat",timeout:this.timeout});return Y("content",G.message.content),x.fromResponse(G,N,R)}async completion(P,_,N,R=3){const $=[{role:"system",content:F.ollamaContext?.replace("<languageId>",N)+"\n\n"+`End of file context:\n\n${P.contentAfter}`},{role:"user",content:`Start of file context:\n\n${P.contentBefore}`}];Y("prompt",$.map((W)=>`role: ${W.role}\n${W.content}`).join("\n"));const z={model:this.model,stream:!1,messages:$},G=await this.request({method:"POST",body:z,endpoint:"/api/chat",timeout:this.timeout});return Y("content",G.message.content),v.fromResponse(G)}}if(F.authCopilot)await R0(),process.exit(0);if(F.authCodeium)await $0(),process.exit(0);V.registerProvider("copilot",new A);V.registerProvider("openai",new y);V.registerProvider("codeium",new H);V.registerProvider("ollama",new q);var z0=new _0.Service({capabilities:{codeActionProvider:!0,executeCommandProvider:{commands:k.map((P)=>P.key)},completionProvider:{resolveProvider:!1,triggerCharacters:F.triggerCharacters},textDocumentSync:{change:1,openClose:!0}}});z0.registerEventHandlers(r);try{await z0.start()}catch(P){Y("lsp-service error",P.message)}
